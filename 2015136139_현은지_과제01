{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf #텐서플로우 가져오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "placeholder = tf.placeholder(tf.float32,shape=[1,5])#placeholoer 선언"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "b1 = tf.constant([0],dtype=tf.float32)\n",
    "b2 = tf.constant([0],dtype=tf.float32)\n",
    "b3 = tf.constant([0],dtype=tf.float32)\n",
    "b4 = tf.constant([0],dtype=tf.float32)\n",
    "b5 = tf.constant([0],dtype=tf.float32)\n",
    "#bias 선언\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "var1 = tf.Variable([3],dtype=tf.float32)\n",
    "var2 = tf.Variable([5],dtype=tf.float32)\n",
    "var3 = tf.Variable([7],dtype=tf.float32)\n",
    "var4 = tf.Variable([9],dtype=tf.float32)\n",
    "var5 = tf.Variable([11],dtype=tf.float32)\n",
    "#Variable 선언"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(\"Placeholder:0\", shape=(1, 5), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "print(placeholder)#그래프 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensor(\"add_8:0\", dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "value1=1\n",
    "value2=2\n",
    "value3=3\n",
    "value4=4\n",
    "value5=5\n",
    "\n",
    "ph1 = tf.placeholder(dtype=tf.float32)\n",
    "ph2 = tf.placeholder(dtype=tf.float32)\n",
    "ph3 = tf.placeholder(dtype=tf.float32)\n",
    "ph4 = tf.placeholder(dtype=tf.float32)\n",
    "ph5 = tf.placeholder(dtype=tf.float32)\n",
    "\n",
    "result_value=var1*ph1+b1+var2*ph2+b2+var3*ph3+b3+var4*ph4+b4+var5*ph5+b5#수식생성\n",
    "\n",
    "feed_dict={ph1: value1, ph2: value2, ph3: value3, ph4:value4, ph5:value5}#맵핑하기\n",
    "print(result_value)#그래프생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 125.]\n"
     ]
    }
   ],
   "source": [
    "sess=tf.Session()\n",
    "init=tf.global_variables_initializer() #Variable 초기화\n",
    "sess.run(init)\n",
    "result=sess.run(result_value,feed_dict=feed_dict)\n",
    "print(result)#계산하기"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
